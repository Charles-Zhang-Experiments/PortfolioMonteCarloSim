@page "/"
@using PortfolioRisk.Core
@using System.Collections.ObjectModel
@using PortfolioBuilder.Models
@using PortfolioRisk.Core.DataSourceService
@using PortfolioRisk.Core.DataTypes

<EditForm Model="@ApplicationState.Config" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    
    <h1 class="text-center">History Time Range</h1>
    <p class="text-center"><InputDate @bind-Value="ApplicationState.Config.StartDate" />-<InputDate @bind-Value="ApplicationState.Config.EndDate" /></p>

    <div class="row">
        <div class="col-8">
            <p>Enter the constituents of your portfolio below; 
                Make sure the currency matches the return value as indicated from <a href="https://ca.finance.yahoo.com/">Yahoo Finance</a>.</p>
            <p>Total Allocation (in CAD): <InputNumber @bind-Value="ApplicationState.Config.TotalAllocation"/></p>

            @* <button type="submit">Submit</button> *@

            @foreach (AssetDefinition definition in ApplicationState.Assets)
            {
                <p>
                    <InputText @bind-Value="definition.Symbol"/>
                    <InputSelect class="form-select" @bind-Value="definition.Currency">
                        <option value="CAD">CAD</option>
                        <option value="USD">USD</option>
                    </InputSelect>
                    <InputNumber @bind-Value="definition.Weight"/>
                    <a href="@GeneratePreviewLink(definition)" class="link-primary" target="_blank" rel="noopener noreferrer" @onclick="UpperCaseTexts">Preview</a>
                </p>
            }

            <button type="button" class="btn btn-primary" @onclick="AddEntry">Add</button>
            <button type="button" class="btn btn-danger" @onclick="RemoveEntry">Remove</button>
            
            <p>When you are done, go to <NavLink class="link-dark" href="fetchdata">
                                                        <span class="oi oi-list-rich" aria-hidden="true"></span> Fetch data
                                                    </NavLink>.</p>
        </div>
        <div class="col-4">
            <h3>Factors</h3>
            <p></p>
            @foreach (AssetDefinition definition in ApplicationState.Factors)
            {
                <span>@definition.Symbol (@definition.Currency): @definition.Weight</span><hr/>
            }
        </div>
    </div>
</EditForm>

@code{
    #region Events
    protected override void OnInitialized()
    {
        ApplicationState.Assets = new HashSet<AssetDefinition>();
        ApplicationState.Factors = new HashSet<AssetDefinition>();
        
        AddPortfolioAsset(new AssetDefinition("SPY", AssetCurrency.USD, 1));
        AddPortfolioAsset(new AssetDefinition("XIU", AssetCurrency.CAD, 1));
    }
    private void AddEntry()
    {
        AddPortfolioAsset(new AssetDefinition("Asset Name", AssetCurrency.CAD, 1));
        UpperCaseTexts();
    }

    private void RemoveEntry()
    {
        if (ApplicationState.Assets.Count != 0)
            RemovePortfolioAsset(ApplicationState.Assets.Last());
        UpperCaseTexts();
    }
    #endregion

    #region Routines
    private void AddPortfolioAsset(AssetDefinition newAsset)
    {
        ApplicationState.Assets.Add(newAsset);
        ApplicationState.Factors.Add(newAsset);
        
        if (newAsset.Currency == AssetCurrency.USD)
            ApplicationState.Factors.Add(new AssetDefinition("USD/CAD", AssetCurrency.USD_TO_CAD, 0));

        ApplicationState.RefreshConfig();
    }
    private void RemovePortfolioAsset(AssetDefinition oldAsset)
    {
        ApplicationState.Assets.Remove(oldAsset);
    }

    private void UpperCaseTexts()
    {
        foreach (AssetDefinition assetDefinition in ApplicationState.Assets)
        {
            if(assetDefinition.Symbol != null)
                assetDefinition.Symbol = assetDefinition.Symbol.ToUpper();
        }
    }
    #endregion

    #region Helpers
    private object GeneratePreviewLink(AssetDefinition definition)
    {
        if (string.IsNullOrEmpty(definition.Symbol)) return "#";

        DateTime configStartDate = ApplicationState.Config.StartDate!.Value;
        DateTime configEndDate = ApplicationState.Config.EndDate!.Value;
        return $"https://ca.finance.yahoo.com/quote/{definition.Symbol}/history?period1={YahooFinanceHelper.ConvertTimeFormat(configStartDate)}&period2={YahooFinanceHelper.ConvertTimeFormat(configEndDate)}&interval=1d&filter=history&frequency=1d&includeAdjustedClose=true";
    }
    #endregion

    #region Not Used
    private void HandleValidSubmit()
    {
    // Process the valid form
    }
    #endregion
}